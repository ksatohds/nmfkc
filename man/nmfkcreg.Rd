% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nmfkcreg.R
\name{nmfkcreg}
\alias{nmfkcreg}
\title{Optimizing X and C on NMF (Non-negative Matrix Factorization) kernel covariate regression model Y~XCA where Y and A are given}
\usage{
nmfkcreg(
  Y,
  A,
  Q = 2,
  gamma = 0,
  epsilon = 1e-04,
  maxit = 5000,
  method = "EU",
  trace = FALSE
)
}
\arguments{
\item{Y}{observation matrix}

\item{A}{kernel matrix. Without covariate, use identity matrix A=diag(ncol(Y)). Or matrix A(R,N) having N columns can be accepted.}

\item{Q}{rank of basis matrix and Q<=min{P,N}}

\item{gamma}{penalty parameter for C:QxN where
objective function:tr(Y-YHAT)'(Y-YHAT)+gamma\emph{trC'C for method="EU"
and sum(-Y}log(YHAT)+YHAT)+gamma*sum(C^2) for method="KL"}

\item{epsilon}{positive convergence tolerance}

\item{maxit}{maximum number of iterations}

\item{method}{default objective function is Euclid distance "EU", otherwise Kullbackâ€“Leibler divergence "KL"}

\item{trace}{display current iteration every 10 times if trace=TRUE}
}
\value{
X(N,Q) whose column sum is 1

C(Q,N) parameter matrix

B(Q,N), B=CA regression coefficient matrix

YHAT(P,N), YHAT=XB=XCA prediction matrix or fitted values for observation matrix Y

P(P,N) probability matrix
for soft clustering based on regression coeffient matrix B.
It is given by P <- t(t(B)/colSums(B)) whose column sum is 1.

objfunc: last objective function

objfunc.iter: objective function at each iteration

r.squared: coefficient of determination R^2, squared correlation between Y and YHAT
}
\description{
\code{nmkcfreg} The goal of nmfkcreg is to perform NMF (Non-negative Matrix Factorization) regression model described by Y~XCA
where observation matrix Y(P,N),
kernel matrix A(N,N) with parameter beta,
basis matrix X(P,Q) whose column sum is 1 and Q<=min{P,N}
and coefficient matrix C(Q,N).
Note that Y and A are known, and X and C are unknown.
}
\examples{
# library(fda)
# data(CanadianWeather)
# d <- CanadianWeather$dailyAv[,,1]
# Y <- d-min(d)
# A <- diag(ncol(Y))
# install.packages("devtools")
# devtools::install_github("ksatohds/nmfkcreg")
# library(nmfkcreg)
# result <- nmfkcreg(Y,A,Q=2)
# result$r.squared
}
